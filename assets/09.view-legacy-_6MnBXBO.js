System.register(["./index-legacy-bgULapT2.js"],(function(n,e){"use strict";var a,t,r,l,s,u,o,c,d;return{setters:[function(n){a=n.d,t=n.f,r=n.e,l=n.h,s=n.i,u=n.n,o=n.w,c=n.ab,d=n.F}],execute:function(){n("default",a({__name:"09.view",setup:function(n){return function(n,e){return r(),t(d,null,[l(c,null,{default:o((function(){return e[0]||(e[0]=[s("\n        ## 09.自定义视图\n\n        自定义视图定制可以参考`schema-node-vueview`中的默认实现，需要注意几点。\n\n        1. vue中通过定义props传入node节点，名字是固定，拿到后，需要通过toRaw转为实际节点，否则拿到的是vue封装过的，后续处理会有问题。\n    ")])})),_:1}),e[3]||(e[3]=s()),e[4]||(e[4]=u("pre",null,[s("        "),u("code",null," \n            const props = defineProps<{ node: ScalarNode }>()\n            const scalarNode = toRaw(props.node)\n        "),s("\n    ")],-1)),e[5]||(e[5]=s()),l(c,null,{default:o((function(){return e[1]||(e[1]=[s("\n        2. 请不要使用watch来订阅节点的数据修改和状态修改，可以通过节点的方法来订阅。\n    ")])})),_:1}),e[6]||(e[6]=s()),e[7]||(e[7]=u("pre",null,[s("        "),u("code",null,"\n            // 申明模板需要的状态\n            const state = reactive<{\n                data?: any,\n                display?: any,\n                disable?: boolean,\n                require?: boolean,\n                readonly?: boolean,\n            }>({})\n\n            // data & state watcher\n            let dataWatcher: Function | null = null\n            let stateWatcher: Function | null = null\n\n            onMounted(() => {\n                // 订阅数据变更\n                dataWatcher = scalarNode.subscribe(() => {\n                    const data = scalarNode.rawData // data可能会基于类型定义被转换，使用rawData可以显示错误的数据\n                    state.data = data\n                    state.display = `${!isNull(data) ? data : ''}`\n                }, true)\n\n                // 订阅节点的状态变化，类似不可见，黑白名单变更等状态变化\n                stateWatcher = scalarNode.subscribeState(() => {\n                    state.disable = scalarNode.rule.disable\n                    state.require = scalarNode.require\n                    state.readonly = scalarNode.readonly\n                }, true)\n            })\n\n            // 销毁时，同时销毁订阅记录\n            onUnmounted(() => {\n                if (dataWatcher) dataWatcher()\n                if (stateWatcher) stateWatcher()\n            })\n        "),s("\n    ")],-1)),e[8]||(e[8]=s()),l(c,null,{default:o((function(){return e[2]||(e[2]=[s("\n        3. 定义完成后，可以通过两种方式为类型注册。\n    ")])})),_:1}),e[9]||(e[9]=s()),e[10]||(e[10]=u("pre",null,'        // 覆盖默认视图\n        regSchemaTypeView("test.persons", waterFallView)\n\n        // 为类型注册皮肤名为waterfall的视图,之后可以在schemaView中通过skin指定\n        regSchemaTypeView("test.persons", waterFallView, "waterfall")\n    ',-1))],64)}}}))}}}));
