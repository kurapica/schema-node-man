import{d as s,f as o,e as d,h as t,i as e,n as a,w as l,ab as r,F as u}from"./index-Cibffcn_.js";const f=s({__name:"09.view",setup(i){return(p,n)=>(d(),o(u,null,[t(r,null,{default:l(()=>n[0]||(n[0]=[e("\n        ## 09.自定义视图\n\n        自定义视图定制可以参考`schema-node-vueview`中的默认实现，需要注意几点。\n\n        1. vue中通过定义props传入node节点，名字是固定，拿到后，需要通过toRaw转为实际节点，否则拿到的是vue封装过的，后续处理会有问题。\n    ")])),_:1}),n[3]||(n[3]=e()),n[4]||(n[4]=a("pre",null,[e("        "),a("code",null," \n            const props = defineProps<{ node: ScalarNode }>()\n            const scalarNode = toRaw(props.node)\n        "),e("\n    ")],-1)),n[5]||(n[5]=e()),t(r,null,{default:l(()=>n[1]||(n[1]=[e("\n        2. 请不要使用watch来订阅节点的数据修改和状态修改，可以通过节点的方法来订阅。\n    ")])),_:1}),n[6]||(n[6]=e()),n[7]||(n[7]=a("pre",null,[e("        "),a("code",null,"\n            // 申明模板需要的状态\n            const state = reactive<{\n                data?: any,\n                display?: any,\n                disable?: boolean,\n                require?: boolean,\n                readonly?: boolean,\n            }>({})\n\n            // data & state watcher\n            let dataWatcher: Function | null = null\n            let stateWatcher: Function | null = null\n\n            onMounted(() => {\n                // 订阅数据变更\n                dataWatcher = scalarNode.subscribe(() => {\n                    const data = scalarNode.rawData // data可能会基于类型定义被转换，使用rawData可以显示错误的数据\n                    state.data = data\n                    state.display = `${!isNull(data) ? data : ''}`\n                }, true)\n\n                // 订阅节点的状态变化，类似不可见，黑白名单变更等状态变化\n                stateWatcher = scalarNode.subscribeState(() => {\n                    state.disable = scalarNode.rule.disable\n                    state.require = scalarNode.require\n                    state.readonly = scalarNode.readonly\n                }, true)\n            })\n\n            // 销毁时，同时销毁订阅记录\n            onUnmounted(() => {\n                if (dataWatcher) dataWatcher()\n                if (stateWatcher) stateWatcher()\n            })\n        "),e("\n    ")],-1)),n[8]||(n[8]=e()),t(r,null,{default:l(()=>n[2]||(n[2]=[e("\n        3. 定义完成后，可以通过两种方式为类型注册。\n    ")])),_:1}),n[9]||(n[9]=e()),n[10]||(n[10]=a("pre",null,'        // 覆盖默认视图\n        regSchemaTypeView("test.persons", waterFallView)\n\n        // 为类型注册皮肤名为waterfall的视图,之后可以在schemaView中通过skin指定\n        regSchemaTypeView("test.persons", waterFallView, "waterfall")\n    ',-1))],64))}});export{f as default};
