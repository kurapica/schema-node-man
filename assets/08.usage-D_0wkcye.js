import{d as m,f as p,e as d,h as o,i as n,n as t,w as s,ab as l,F as r}from"./index-9791dJk7.js";const f=m({__name:"08.usage",setup(a){return(u,e)=>(d(),p(r,null,[o(l,null,{default:s(()=>e[0]||(e[0]=[n("\n        ## 08. 使用\n\n        数据节点库本身并不依赖vue或者react，所以可以配合合适的数据视图库实现前端自动渲染。\n\n        本次提供的schema-node-vueview是基于vue3和ElementPlus构建的数据视图库。先介绍它的使用方式。\n\n        1. 创建一个demo项目，并初始化，选择Vue和TypeScript。\n    ")])),_:1}),e[6]||(e[6]=n()),e[7]||(e[7]=t("pre",null,"        npm create vite@latest schema-node-demo -- --template vue-ts\n        cd schema-node-demo\n        npm install\n    ",-1)),e[8]||(e[8]=n()),o(l,null,{default:s(()=>e[1]||(e[1]=[n("\n        2. 安装element-plus, schema-node-vueview, schema-node依赖。\n    ")])),_:1}),e[9]||(e[9]=n()),e[10]||(e[10]=t("pre",null,"        npm install schema-node\n        npm install element-plus\n        npm install schema-node-vueview\n    ",-1)),e[11]||(e[11]=n()),o(l,null,{default:s(()=>e[2]||(e[2]=[n("\n        3. 配置管理器中选择下载test命名空间，将下载test.json拷贝到`schema-node-demo\\assets\\test.json`。\n\n        4. 打开`schema-node-demo\\main.ts`，在里面引入注册语句。\n    ")])),_:1}),e[12]||(e[12]=n()),e[13]||(e[13]=t("pre",null,"        import { createApp } from 'vue'\n        import './style.css'\n        import App from './App.vue'\n        import ElementPlus from \"element-plus\"\n        import 'element-plus/dist/index.css'\n\n        // 导入下载的JOSN类型配置信息并注册\n        import schema from './assets/test.json'\n        import { registerSchema, type INodeSchema } from 'schema-node'\n        registerSchema(schema as INodeSchema[])\n\n        const app = createApp(App)\n        app.use(ElementPlus)\n        app.mount('#app')\n    ",-1)),e[14]||(e[14]=n()),o(l,null,{default:s(()=>e[3]||(e[3]=[n("\n        5. 打开`schema-node-demo\\App.vue`，修改内容为\n    ")])),_:1}),e[15]||(e[15]=n()),e[16]||(e[16]=t("pre",null,[n("       "),t("code",null,'\n            <script setup lang="ts">\n                import { schemaView } from \'schema-node-vueview\'\n                import { ref } from \'vue\'\n\n                // 绑定数据\n                const data = ref(null)\n            <\/script>\n\n            <template>\n                <el-form label-width="140px" :model="data" style="width:600px">\n                    <!-- 使用schemaView组件进行统一展示 -->\n                    <schema-view\n                        v-model="data"\n                        :in-form="true"\n                        :config="{\n                            type: \'test.person\',\n                            display: \'信息\'\n                        }"\n                    ></schema-view>\n                </el-form>\n                <pre>{{ data }}</pre>\n            </template>\n\n            <style lang="css">\n            body {\n                background-color: white;\n                color: black\n            }\n            </style>\n       '),n("\n    ")],-1)),e[17]||(e[17]=n()),o(l,null,{default:s(()=>e[4]||(e[4]=[n("\n        6. 保存文件，然后执行`npm run dev`查看效果。\n\n        ----\n\n        `schemaView`是通用的数据节点视图，它会基于指定的节点类型和皮肤skin，来选取实际的视图进行展示。其中inForm属性用于表明在Form表单中使用，它会实现自动校验功能。\n\n        同样可以调用`form.validate()` 方法触发校验。\n\n        综上所述，可以在本配置界面上传已有的类型配置，修改后，下载到本地覆盖使用即可。维护较为方便。同时，因为类型会缓存在本地浏览器，方便持久维护。\n\n        已经注册的类型，也可以直接创建出数据节点，来使用，这时可以替换`App.vue`内容类似\n    ")])),_:1}),e[18]||(e[18]=n()),e[19]||(e[19]=t("pre",null,[n("        "),t("code",null,'\n            <script setup lang="ts">\n            import { type AnySchemaNode, getSchemaNode } from \'schema-node\';\n            import { schemaView } from \'schema-node-vueview\'\n            import { onMounted, ref } from \'vue\'\n\n            const node = ref<AnySchemaNode | null>(null)\n            onMounted(async () => {  \n            node.value = await getSchemaNode({ type: "test.person" }, {})\n            })\n            <\/script>\n\n            <template>\n            <el-form v-if="node" label-width="140px" :model="node.data" style="width:600px">\n                <schema-view\n                :node="(node as AnySchemaNode)"\n                :in-form="true"\n                ></schema-view>\n            </el-form>\n            </template>\n\n            <style lang="css">\n            body {\n            background-color: white;\n            color: black\n            }\n            </style>\n        '),n("\n    ")],-1)),e[20]||(e[20]=n()),o(l,null,{default:s(()=>e[5]||(e[5]=[n("\n        通过getSchemaNode方法可以指定类型和初始数据来创建，之后可以通过`node.data` 来获取待提交的数据，也可以通过`node.data = value`写入。\n\n        不同的数据节点有不同的方法，不过数量不多，可以自行尝试，类似数组类型可以通过`addRow`和`delRows`添加和删除列。但无需注册自定义视图的场合无需处理。\n    ")])),_:1})],64))}});export{f as default};
