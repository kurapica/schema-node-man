System.register(["./index-legacy-vICpH40T.js"],(function(e,t){"use strict";var n,a,r,s,i,o,u,c,l;return{setters:[function(e){n=e.d,a=e.f,r=e.e,s=e.h,i=e.i,o=e.p,u=e.w,c=e.aq,l=e.F}],execute:function(){e("default",n({__name:"09.view",setup:function(e){return function(e,t){return r(),a(l,null,[s(c,null,{default:u((function(){return t[0]||(t[0]=[i("\n        ## 09. Custom Views\n\n        To create custom views, you can refer to the default implementations provided in `schema-node-vueview`. There are a few important points to keep in mind:\n\n        1. In Vue, the `node` data node is passed into the component via a prop with a fixed name. Once received, you should use `toRaw` to unwrap it into the actual data node instance. Otherwise, you’ll get a Vue-wrapped reactive object, which may cause issues during further processing.\n    ")])})),_:1}),t[3]||(t[3]=i()),t[4]||(t[4]=o("pre",null,[i("        "),o("code",null," \n            const props = defineProps<{ node: ScalarNode }>()\n            const scalarNode = toRaw(props.node)\n        "),i("\n    ")],-1)),t[5]||(t[5]=i()),s(c,null,{default:u((function(){return t[1]||(t[1]=[i("\n        2. Avoid using `watch` to observe changes in the node’s data or state. Instead, use the subscription methods provided by the node itself for more accurate and efficient tracking.\n    ")])})),_:1}),t[6]||(t[6]=i()),t[7]||(t[7]=o("pre",null,[i("        "),o("code",null,"\n            // declare the state\n            const state = reactive<{\n                data?: any,\n                display?: any,\n                disable?: boolean,\n                require?: boolean,\n                readonly?: boolean,\n            }>({})\n\n            // data & state watcher\n            let dataWatcher: Function | null = null\n            let stateWatcher: Function | null = null\n\n            onMounted(() => {\n                // subscribe data change\n                dataWatcher = scalarNode.subscribe(() => {\n                    const data = scalarNode.rawData // use rawData to allow error data\n                    state.data = data\n                    state.display = `${!isNull(data) ? data : ''}`\n                }, true)\n\n                // subscribe state change, like invisible\n                stateWatcher = scalarNode.subscribeState(() => {\n                    state.disable = scalarNode.rule.disable\n                    state.require = scalarNode.require\n                    state.readonly = scalarNode.readonly\n                }, true)\n            })\n\n            // dispose subscription\n            onUnmounted(() => {\n                if (dataWatcher) dataWatcher()\n                if (stateWatcher) stateWatcher()\n            })\n        "),i("\n    ")],-1)),t[8]||(t[8]=i()),s(c,null,{default:u((function(){return t[2]||(t[2]=[i("\n        3. Once the custom view is defined, there are two ways to register it for a specific type.\n    ")])})),_:1}),t[9]||(t[9]=i()),t[10]||(t[10]=o("pre",null,'        // override the default view\n        regSchemaTypeView("test.persons", waterFallView)\n\n        // register view with skin, use `skin` in schemaview to active the skin view\n        regSchemaTypeView("test.persons", waterFallView, "waterfall")\n    ',-1))],64)}}}))}}}));
