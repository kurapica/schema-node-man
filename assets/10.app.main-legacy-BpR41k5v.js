System.register(["./index-legacy--UuLG5c5.js"],(function(e,a){"use strict";var t,i,n,s,l,o;return{setters:[function(e){t=e.d,i=e.c,n=e.e,s=e.w,l=e.i,o=e.aq}],execute:function(){e("default",t({__name:"10.app.main",setup:function(e){return function(e,a){return n(),i(o,null,{default:s((function(){return a[0]||(a[0]=[l("\n        ### 10.4 Main Application\n\n        Data entry and enabling the data push chain present a challenge in establishing a mutual exclusion lock for data updates. Whether using distributed or local locks, a lock key is required. Typically, this is done in the form {application name}_{target ID}.\n\n        However, if data push involves multiple applications, for example, each application aggregates data for a layer of managers, then a safe approach is to identify a sufficiently high-level manager as the target ID to establish a lock.\n\n        To clarify this step, you can specify a master application for the application (this only applies if the application's fields are reference fields). This allows the mutual exclusion lock to be locked at a higher level, avoiding issues.\n\n        ### TODO\n\n        Further discussion of the application's features awaits further discussion after the release of the basic backend SDK.\n    ")])})),_:1})}}}))}}}));
