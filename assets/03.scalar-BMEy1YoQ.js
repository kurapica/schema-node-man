import{d as l,f as m,e as o,h as a,i as n,w as t,ab as s,F as p}from"./index-VWEWGFeB.js";import{_ as r}from"./showandtry.vue_vue_type_style_index_0_lang-BgWOQSDt.js";import"./tryit.vue_vue_type_script_setup_true_lang-B75G69Dc.js";const x=l({__name:"03.scalar",setup(f){return(i,e)=>(o(),m(p,null,[a(s,null,{default:t(()=>e[0]||(e[0]=[n("\n        ## 03. 基础数据类型\n\n        基础数据类型是无结构的数据类型，作为最小的数据单元被数据库保存。通常不允许自己定义基础数据类型，但可以基于已有的基础数据类型进行定义，但如果只是为了配置例如最大最小值的情况，可以在结构体中进行配置。\n\n        但一些特殊情况，需要定义，例如在本配置服务中，我们定义了`schema.valuetype`，它基于字符串类型，然后为它注册了特殊的视图，这样就可以基于这个类型完成数据类型选择。当然，它只用于选择数据类型，不能用于选择命名空间和函数。\n\n        这样申明使用该类型的字段，都可以直接使用注册的视图完成操作，例如函数返回值类型，结构体字段类型等等。\n    ")])),_:1}),e[2]||(e[2]=n()),a(r,{type:"schema.valuetype"}),e[3]||(e[3]=n()),a(s,null,{default:t(()=>e[1]||(e[1]=[n("\n        如果注意到类型展示中它的展示形式的话，实际我们用`schema.scalardefine`类型来描述一个基础数据类型。可以简单尝试下，了解即可，实际应用中很少需要额外定义基础数据类型。\n    ")])),_:1}),e[4]||(e[4]=n()),a(r,{type:"schema.scalardefine"})],64))}});export{x as default};
