System.register(["./index-legacy-DTsjhpt6.js","./showandtry.vue_vue_type_style_index_0_lang-legacy-C-pjQ244.js","./el-tabs-legacy-CnS_tUAz.js","./tryit.vue_vue_type_script_setup_true_lang-legacy-cVAlBNUB.js"],(function(e,n){"use strict";var t,u,s,a,l,c,r,_,i;return{setters:[function(e){t=e.d,u=e.f,s=e.e,a=e.h,l=e.i,c=e.w,r=e.aq,_=e.F},function(e){i=e._},null,null],execute:function(){e("default",t({__name:"03.scalar",setup:function(e){return function(e,n){return s(),u(_,null,[a(r,null,{default:c((function(){return n[0]||(n[0]=[l("\n        ## 03. 基础数据类型\n\n        基础数据类型是无结构的数据类型，作为最小的数据单元被数据库保存。通常不允许自己定义基础数据类型，但可以基于已有的基础数据类型进行定义，但如果只是为了配置例如最大最小值的情况，可以在结构体中进行配置。\n\n        但一些特殊情况，需要定义，例如在本配置服务中，我们定义了`schema.valuetype`，它基于字符串类型，然后为它注册了特殊的视图，这样就可以基于这个类型完成数据类型选择。当然，它只用于选择数据类型，不能用于选择命名空间和函数。\n\n        这样申明使用该类型的字段，都可以直接使用注册的视图完成操作，例如函数返回值类型，结构体字段类型等等。\n    ")])})),_:1}),n[2]||(n[2]=l()),a(i,{type:"system.schema.valuetype"}),n[3]||(n[3]=l()),a(r,null,{default:c((function(){return n[1]||(n[1]=[l("\n        如果注意到类型展示中它的展示形式的话，实际我们用`schema.scalardefine`类型来描述一个基础数据类型。可以简单尝试下，了解即可，实际应用中很少需要额外定义基础数据类型。\n    ")])})),_:1}),n[4]||(n[4]=l()),a(i,{type:"system.schema.scalarschema"})],64)}}}))}}}));
