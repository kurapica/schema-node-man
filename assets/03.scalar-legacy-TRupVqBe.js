System.register(["./index-legacy-BKw_z8oj.js","./showandtry.vue_vue_type_style_index_0_lang-legacy-Cv7pW_HH.js","./tryit.vue_vue_type_script_setup_true_lang-legacy-CAhFDbLR.js"],(function(e,t){"use strict";var s,a,n,i,r,u,c,o,l;return{setters:[function(e){s=e.d,a=e.f,n=e.e,i=e.h,r=e.i,u=e.w,c=e.ab,o=e.F},function(e){l=e._},null],execute:function(){e("default",s({__name:"03.scalar",setup:function(e){return function(e,t){return n(),a(o,null,[i(c,null,{default:u((function(){return t[0]||(t[0]=[r("\n        ## 03. Basic Data Types\n\n        Basic data types are unstructured types and are stored in the database as the smallest units of data. Typically, custom basic types are not allowed, but you can define new types based on existing basic types. However, if the goal is simply to configure constraints like minimum or maximum values, it's better to define them within a struct.\n\n        In some special cases, custom definitions are necessary. For example, in this configuration service, we define `schema.valuetype`, which is based on the string type but has a custom view registered for it. This allows it to be used for selecting data types. Note that it is only used for selecting data types—not for selecting namespaces or functions.\n\n        Fields declared with this type can directly use the registered view for interaction. This includes use cases like function return types, struct field types, and more.\n    ")])})),_:1}),t[2]||(t[2]=r()),i(l,{type:"schema.valuetype"}),t[3]||(t[3]=r()),i(c,null,{default:u((function(){return t[1]||(t[1]=[r("\n        If you pay attention to how the type is displayed, you’ll notice that we actually use the `schema.scalardefine` type to describe a basic data type. You can try it out briefly just to get a sense of how it works—but in practical applications, there is rarely a need to define additional basic data types.\n    ")])})),_:1}),t[4]||(t[4]=r()),i(l,{type:"schema.scalardefine"})],64)}}}))}}}));
