System.register(["./index-legacy-DTsjhpt6.js"],(function(e,t){"use strict";var a,i,n,l,s,d;return{setters:[function(e){a=e.d,i=e.c,n=e.e,l=e.w,s=e.i,d=e.aq}],execute:function(){e("default",a({__name:"10.app.field",setup:function(e){return function(e,t){return n(),i(d,null,{default:l((function(){return t[0]||(t[0]=[s("\n        ### 10.1 Application Fields\n\n        An application can contain multiple sub-applications or multiple fields. Applications that only contain sub-applications provide hierarchical management. Applications that contain multiple fields are data applications. Fields in data applications typically generate data tables in the service using the application, and are automatically maintained by the system.\n\n        Below is a description of each field when adding a new application field. You can try adding new fields yourself in the application management interface.\n\n        1. Field Name: The field name, together with the application name, determines the name of the database table generated in the backend. It is also the field name used when accessing data between the frontend and backend.\n        2. Field Type: The field data type, which determines how the frontend presents the data and how the backend data table structure is constructed.\n        3. Field Display: The field display name.\n        4. Field Description: A detailed description of the field.\n        5. Reference Application: Field data can be imported from other applications, as detailed in the application reference.\n        6. Reference Field: Available when a reference application is provided, this field is used to select the field to import. When importing, if the field name, type, and display are specified, the relevant information of the referenced field will be used. 7. Incremental Data: When a field's data type is an array and its elements are structures, its data size is unknown. If the future data size is uncertain, select incremental data. Incremental data only allows partial updates and comes with built-in paging and other operational logic. This will be explained later when introducing the default view.\n        8. Disable: Disable this field. Because the field is associated with a data table, disabling it ensures that access can be restored at any time.\n        9. Calculation Function: Fields can be divided into input fields and output fields. Input fields are used for front-end data entry. After the data is submitted to the back-end, the back-end calculates the difference between the input data based on the associations generated by the calculation function. This difference is then aggregated and saved in the output field.\n        10. Function Parameters: After specifying a calculation function, you can bind input fields to the function-based parameters. Only input fields are allowed; constant values ​​are not allowed.\n        11. Data Merge Rules: As an output field, the primary key of the data it receives may be duplicated. In this case, the data fields need to be aggregated, such as totals, minimum values, and maximum values. Specify the merge rules here.\n\n        In addition to defining fields, you can also define data associations between fields in the application editor. For example, in a test case, the subject list will limit the optional items in the subject list in the student list. This part of the association only involves the linkage presentation on the front end.\n    ")])})),_:1})}}}))}}}));
