System.register(["./index-legacy-DF46HGGm.js","./el-collapse-item-legacy-DKZP8ngQ.js","./showandtry.vue_vue_type_style_index_0_lang-legacy-CVPPy41a.js","./tryit.vue_vue_type_script_setup_true_lang-legacy-bJjAwZGJ.js"],(function(e,t){"use strict";var n,a,i,s,o,r,c,d,l,u,h;return{setters:[function(e){n=e.d,a=e.f,i=e.e,s=e.h,o=e.i,r=e.n,c=e.w,d=e.ab,l=e.ac,u=e.ad},null,function(e){h=e._},null],execute:function(){e("default",n({__name:"01.intro",setup:function(e){return function(e,t){var n=l,p=u;return i(),a("section",null,[s(d,null,{default:c((function(){return t[0]||(t[0]=[o("\n            # Schema-Node Data Node System\n\n            ## 01. Introduction\n\n            The core function of this system is to describe data types using the JSON format. These data types include basic types, enum types, struct types, array types, and function types.\n\n            In addition to conventional data types, to enable unified operations on both frontend and backend, function types are defined using JSON descriptions and can be compiled into executable functions for both ends. Functions that cannot be fully described in JSON can still be declared, and their implementations can reside only on the backend. The frontend can recognize such functions and decide whether to execute them locally or invoke backend services.\n\n            Data nodes are created on the frontend based on these data types. These nodes handle data organization, storage, validation, and interaction. Data types can be linked together, and with function types and other nodes, enable interactivity such as modifying default values, setting blacklists/whitelists, determining availability, or altering data types based on function evaluation.\n\n            You can click the button below to try it out. After selecting a subject, the corresponding subject score list will appear. The whitelist of this list is determined by the selected subject, and the blacklist is determined by subjects that already have scores configured. These behaviors are configured through the data association list within each type's configuration. Clickable green types can be explored further.\n\n        ")])})),_:1}),t[4]||(t[4]=o()),s(h,{type:"test.person"}),t[5]||(t[5]=o()),t[6]||(t[6]=r("br",null,null,-1)),t[7]||(t[7]=o()),s(p,{accordion:""},{default:c((function(){return[s(n,{title:"Open Source Contents in This Release"},{default:c((function(){return[s(d,null,{default:c((function(){return t[1]||(t[1]=[o("\n                    This release includes only the frontend-specific parts with backend dependencies removed. It includes two libraries and one frontend type configuration manager.\n\n                    1. **schema-node**: A dependency-free data node system based on data types. It creates data nodes and enables data subscription based on defined relationships.\n\n                    2. **schema-node-vueview**: A Vue 3 + Element Plus-based data node view library. Different views can be registered for different data types. This library provides the default implementations.\n\n                    3. **schema-node-man**: A frontend-only type configuration manager. It supports uploading and downloading custom types with automatic caching. Once downloaded, the types can be used with the above two libraries in any project.\n                ")])})),_:1})]})),_:1}),t[3]||(t[3]=o()),s(n,{title:"Application and Server Architecture (Not Included in This Release)"},{default:c((function(){return[s(d,null,{default:c((function(){return t[2]||(t[2]=[o("\n                    When considering how to customize an application based on data types, each application's entity (e.g., a user) should have a unique application ID. In the database, such entities might be stored across multiple tables. Each table field corresponds to a part of the data type structure.\n\n                    For example, you could assign a `struct` type to store user information—each user would correspond to one row. For a report card or grade list, an `array` type would represent multiple rows.\n\n                    In this way, an application can be defined with multiple fields, each associated with a specific data type. The system can automatically generate the database table structure based on these configurations.\n\n                    When the client requests application data by application ID, the server can package the required type information, enum values (lazy-loaded if needed), and the data itself to reduce access pressure.\n\n                    Clients can use a unified API to submit changes to the application data. Besides just saving, fields can be associated to form data push chains—often used for filtering, transformation, and aggregation—so results can be prepared without needing to process raw data after collection. This is especially efficient when handling large volumes of data.\n\n                    If a field is declared as a broadcast type, it can trigger protocol-specific broadcast operations after data calculation and pushing.\n\n                    The server architecture can be divided into configuration management servers and application servers. Configuration servers are internal-only. Once updated, they can push changes to all application servers, which will then automatically update database schemas and related logic online.\n\n                    ![Architecture Diagram](./assets/img/architecture.en.png)\n                ")])})),_:1})]})),_:1})]})),_:1})])}}}))}}}));
